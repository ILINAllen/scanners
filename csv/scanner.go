package csv

import (
	"encoding/csv"
	"io"
)

// Config allows customization of Scanner behavior.
// The first block of fields mirrors those found on csv.Reader.
// https://golang.org/pkg/encoding/csv/#Reader
type Config struct {
	// Comma defaults to ','.
	Comma            rune
	Comment          rune
	FieldsPerRecord  int
	LazyQuotes       bool
	TrimLeadingSpace bool
	ReuseRecord      bool

	// ContinueOnError controls scanner behavior in error scenarios.
	// If true, continue scanning until io.EOF is reached.
	// If false (default), any error encountered during scanning
	// will result in the next call to Scan returning false and
	// the Scanner may be considered dead.
	// See https://golang.org/pkg/encoding/csv/#pkg-variables
	// and https://golang.org/pkg/encoding/csv/#ParseError
	// for more information regarding possible error values.
	ContinueOnError bool
}

// Scanner wraps a csv.Reader via an API similar to that of bufio.Scanner.
type Scanner struct {
	reader *csv.Reader
	record []string
	err    error

	continueOnError bool
}

// NewScanner returns a scanner configured with the provided separator (comma).
func NewScanner(reader io.Reader, comma rune) *Scanner {
	return ConfigureScanner(reader, Config{Comma: comma})
}

// ConfigureScanner builds a *csv.Reader from the provided io.Reader and Config
// and wraps it in a *Scanner, ready for action.
func ConfigureScanner(reader io.Reader, config Config) *Scanner {
	csvReader := csv.NewReader(reader)
	if config.Comma != 0 {
		csvReader.Comma = config.Comma
	}
	csvReader.Comment = config.Comment
	csvReader.FieldsPerRecord = config.FieldsPerRecord
	csvReader.LazyQuotes = config.LazyQuotes
	csvReader.TrimLeadingSpace = config.TrimLeadingSpace
	csvReader.ReuseRecord = config.ReuseRecord
	return &Scanner{
		reader:          csvReader,
		continueOnError: config.ContinueOnError,
	}
}

// Scan advances the Scanner to the next record, which will then be available
// through the Record method. It returns false when the scan stops, either by
// reaching the end of the input or an error. After Scan returns false, the
// Error method will return any error that occurred during scanning, except
// that if it was io.EOF, Error will return nil.
func (this *Scanner) Scan() bool {
	if this.eof() {
		return false
	}
	this.record, this.err = this.reader.Read()
	return !this.eof()
}

func (this *Scanner) eof() bool {
	return this.err == io.EOF || this.err != nil && !this.continueOnError
}

// Record returns the most recent record generated by a call to Scan as a
// []string. See *csv.Reader.ReuseRecord for details on the strategy for
// reusing the underlying array: https://golang.org/pkg/encoding/csv/#Reader
func (this *Scanner) Record() []string {
	return this.record
}

// Error returns the last non-nil error produced by Scan (if there was one).
// It will not ever return io.EOF. This method may be called at any point
// during or after scanning but the underlying err will be reset by each call
// to Scan.
func (this *Scanner) Error() error {
	if this.err == io.EOF {
		return nil
	}
	return this.err
}
